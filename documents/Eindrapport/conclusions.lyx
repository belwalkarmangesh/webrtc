#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
In 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:Assignment-formulation"

\end_inset

 we defined our research question: 
\begin_inset Quotes eld
\end_inset


\emph on
In what way can one create a dynamic peer-to-peer multiplayer-game-network-topol
ogy that scales with the amount of users participating by only using WebRTC?
\emph default
".
 We answer this question through answering the sub-questions.
\end_layout

\begin_layout Subsection
How can one distribute essential network tasks over all peers?
\begin_inset CommandInset label
LatexCommand label
name "sub:network_tasks"

\end_inset


\end_layout

\begin_layout Standard
In 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:Supernode-topologies-and"

\end_inset

 we identified the tasks that have to be performed to maintain the network:
 ensuring the network connectivity and handling data flow for unconnected
 nodes.
 We saw that we can assign supernodes to carry out these tasks.
 They ensure the network connectivity by maintaining a connection to all
 other supernodes, where it is the child node's own responsibility to maintain
 a connection to a supernode, and they route data flow between unconnected
 nodes when a full connection between them is not deemed necessary or when
 they attempt to establish this connection.
 To make sure supernodes are elected when necessary and to spread them out
 evenly throughout the network, we identified PoPCorn as a suitable technique
 to accomplish this.
 
\end_layout

\begin_layout Subsection
How can the impact of unpredictable circumstances be reduced?
\end_layout

\begin_layout Standard
Asynchronous requests make a dynamically changing network vulnerable for
 errors.
 We attempted to ensure the network stability by different methods:
\end_layout

\begin_layout Paragraph

\series bold
Prevention methods:
\end_layout

\begin_layout Itemize
Every change in the state of the node is propagated to the involved nodes.
 For example: getting a token or becoming a supernode.
 A supernode state is also propagated to the server.
\end_layout

\begin_layout Itemize
Once in a while each supernode get a list of all supernodes from the server
 and ensures it is connected to all other supernodes.
\end_layout

\begin_layout Itemize
Once in a while a not supernode gets a list with supernodes from its parent
 to ensure it is always connected to three supernodes.
\end_layout

\begin_layout Itemize
When a node leaves the network, it handles its leave by sending a message
 to all neighbours and in case of supernode choose a new parent for its
 children.
\end_layout

\begin_layout Paragraph

\series bold
Recovery methods:
\end_layout

\begin_layout Itemize
Once in a while all broken relationships are fixed with the new information
 from server.
\end_layout

\begin_layout Itemize
Once in a while all, eventually unused, token information about other nodes
 is deleted.
 
\end_layout

\begin_layout Subsection
How can all data reach all peers in a bandwidth-efficient way?
\end_layout

\begin_layout Standard
There are two aspects to discuss about bandwidth and latency efficiency:
 making a graph of nodes and finding a route between the nodes.
 Also the transmitting technology self is discussed.
\end_layout

\begin_layout Subsubsection
Coordinate system
\end_layout

\begin_layout Standard
As in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Vivaldi"

\end_inset

 discussed we use Vivaldi to organise our network by latency.
 Here, the nodes that are close to each other in a n-dimensional space are
 most likely to connect to each other.
 Vivaldi ensures that all edges in the node graph represent the current
 latency between the peers.
\end_layout

\begin_layout Subsubsection
Routing
\begin_inset CommandInset label
LatexCommand label
name "sub:Routing"

\end_inset


\end_layout

\begin_layout Standard
After the network is structured we can send messages through the network.
 As in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:network_tasks"

\end_inset

 we will use supernodes for this purpose.
 The supernodes have an important role to provide for communication between
 all nodes.
 At this moment if a child node wants to send a message to a some other
 node, it sends it to its parent.
 If the intended receiver is not a child of the same parent, the parent
 relays the packet to all its siblings to reach the intended receiver.
 All supernodes are connected with each other what makes the network somewhat
 less scalable.
\end_layout

\begin_layout Standard
Scalability is currently still an issue.
 This is a direct result of all supernodes having to stay connected to all
 other supernodes.
 Eventually some of these connections have to be dropped to allow an expansion
 of the entire network.
 More about this future process is explained in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Routing-tables"

\end_inset

.
\end_layout

\begin_layout Subsubsection
WebRTC
\end_layout

\begin_layout Standard
The underlying WebRTC technology is also a factor that is important for
 data transmission.
 WebRTC offers a reliability flag.
 Unfortunately Chrome only supports unreliable WebRTC data channels.
 We hope that it will be implemented in the near future.
\end_layout

\begin_layout Subsubsection
Speed
\end_layout

\begin_layout Standard
The network library hardly has any overhead for the network at all and almost
 all traffic results from data the application using the library sends.
 In the case of 
\noun on
Orbit Impossible
\noun default
, which is not optimised at all, this still results in quite a pleasant
 player experience with only 250 kilobyte/second bandwidth usage with 50
 active players.
\end_layout

\end_body
\end_document
