#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
Node Communication
\end_layout

\begin_layout Standard
The basis of the networking library is what we call the unstructured network:
 individual unstructured nodes that have the ability to connect and communicate
 to each other.
 The unstructured network - as the name implies - does not organize or structure
 itself, and requires an additional layer to be fully useful as a peer-to-peer
 network.
 It does have a lot of value: the structured network described in the section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Network-Topology"

\end_inset

 relies heavily on the functionality provided by the unstructured network.
 Also, individual peer-to-peer connections, such as the connection between
 the game and the mobile controller, are easily established using unstructured
 nodes.
 In this section we will discuss the design and inner workings of the unstructur
ed network.
\end_layout

\begin_layout Subsubsection
Server technology
\end_layout

\begin_layout Standard
The choice of which technology to use for the bootstrapping process of peers
 is a relatively easy one.
 We require the server to know which nodes are present in the network, and
 ideally without the use of relatively slow databases.
 Node.js seems to be an obvious choice, where the server thread is persistent
 and a node list can be maintained in memory instead of on disk.
 WebSockets seemed to be the best technology for our purposes as it provides
 a convenient and reliable way for exchanging data, and this choice was
 backed up by numerous sources on the internet where the use of WebSockets
 as signalling channel was ubiquitous among WebRTC applications.
 
\end_layout

\begin_layout Subsubsection
Mixins
\end_layout

\begin_layout Standard
To achieve multiple inheritance we use mixins, a design pattern common with
 JavaScript (and therefore CoffeeScript) development.
 Mixins work by having a class extend the Mixable class, which provides
 the functionality to include mixins.
 
\end_layout

\begin_layout Subsubsection
Event-Driven Architecture
\end_layout

\begin_layout Standard
The networking library makes extensive use of events, for which the functionalit
y is provided by a mixin.
 Events are used for most of the internal functionality of the nodes, and
 networking is also entirely event driven.
 Nodes communicate with each other by emitting events on their remotes,
 where they are transparently handled.
 This enables peers to execute complex procedures by triggering a sequence
 of events on their peers.
 Node.js is ideal for an event-driven application, as it is built with an
 event-driven approach in mind.
\end_layout

\begin_layout Subsubsection
Controllers
\end_layout

\begin_layout Standard
Nodes as well as the server represent a Controller - an interface that provides
 some common functionality like the relaying of messages or responding to
 queries.
 Controllers bind all networking functionality together, and maintain a
 collection of their connected nodes.
 
\end_layout

\begin_layout Subsubsection
Remotes
\end_layout

\begin_layout Standard
All remote communicating entities - a peer, a server or a client - are represent
ed by a Remote object.
 The Remote base class provides a common transparent API for all communication,
 regardless of how this communication is implemented in the Remote sub class.
 Remotes are owned by the controller, as displayed in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Communication-between-server-and-nodes"

\end_inset

.
 Remotes offer functionality to either emit an event or query their When
 a Remote object receives a message, it checks if the message is intended
 for its controller.
 If it is, it triggers the event packed in the message.
 If not, the message is relayed to reach its intended receiver.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/node-server-node.png
	lyxscale 50
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Communication-between-server-and-nodes"

\end_inset

Communication between server and nodes
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Messages
\end_layout

\begin_layout Standard
Events to be sent to a remote are packed into Message objects that, beside
 the event, contains the event parameters, the sender and intended receiver,
 the travelled route and the maximum number of hops the message may take.
 Message objects can be serialized and deserialised for network transfer,
 and also provide functionality for splitting and reassembling messages
 that are too large.
\end_layout

\begin_layout Subsubsection
Initialisation
\end_layout

\begin_layout Standard
As discussed in the section earlier, we route the connection negotiation
 between two peers via the server using WebSockets.
 The server, as other controllers, relays any message where the message
 indicates the controller is not the intended receiver.
 This has the advantage that the connection negotiation process is transparent
 and that when there's already a WebRTC connection between two peers and
 they have to renegotiate their connection, this connection can be used.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Initialisation-of-the"

\end_inset

 demonstrates the initialisation process of the connection between peers
 Alice and Bob.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/initialisation.png
	lyxscale 50
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Initialisation-of-the"

\end_inset

Initialisation of the connection
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Network Topology
\begin_inset CommandInset label
LatexCommand label
name "sub:Network-Topology"

\end_inset


\end_layout

\begin_layout Standard
In this section the whole network topology is being explained.
 As discussed in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Peer-to-Peer"

\end_inset

, we chose for PoPCorn as supernode election algorithm.
 In this section we will explain how we implemented it.
 PoPCorn uses Vivaldi coordinate system and therefore we will discuss it
 too.
\end_layout

\begin_layout Subsubsection
Server communication
\end_layout

\begin_layout Standard
Our philosophy is to minimise the communication to the server.
 However, this may not be at the expense of the network reliability.
 Our network uses a server for several purposes, as detailed below.
\end_layout

\begin_layout Enumerate
When going to the game URL, a server distributes the needed files which
 are cached thereafter in the local storage.
\end_layout

\begin_layout Enumerate
When entering the network a new node receives a list of existing supernodes
 to choose from and coordinates the first connection.
\end_layout

\begin_layout Enumerate
When a node becomes supernode and vice versa, a message is sent to the server
 with the mutation information.
\end_layout

\begin_layout Enumerate
Once in a while a supernode updates its supernode list from the server to
 be 100% sure the list is up to date.
\end_layout

\begin_layout Subsubsection
Vivaldi
\end_layout

\begin_layout Standard
When a node joins the network, it sets its 3-dimensional coordinates to
 a random vector with values between [-2, 2] to ensure diversity in the
 coordinates.
 With regular intervals a node asks its peers to for their respective positions
 and computes the latencies.
 From this information the node can calculate its own position as follows:
 for each peer, the node tries to set its distance to that peer equal to
 the latency to that peer, like a spring system.
 This process happens quickly at first, with a node changing its position
 very rapidly as it attempts to find its optimal position within the network.
 Later on it slows down, to avoid oscillations when latency varies
\begin_inset CommandInset citation
LatexCommand cite
key "vivaldi"

\end_inset

.
\end_layout

\begin_layout Subsubsection
PoPCorn
\end_layout

\begin_layout Standard
Now, we have a coordinate system we can start electing supernodes.
 When a parent can not accept more children it generates a token and distributes
 it to the random child - the game of tokens can begin.
 When a node receives a token, it broadcasts the token to all supernodes
 holding a token.
 The supernodes save the token information and send their own token back.
 After a certain threshold, when all tokens assumed to be received a token
 force is being calculated based on the distances of the other tokens.
 If the token position is close enough to own position, the node becomes
 a supernode.
 Other way all supernodes are being asked to give the closest child to the
 token which receives a that token - and the game of tokens starts over
 
\begin_inset CommandInset citation
LatexCommand cite
key "PoPCorn"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Quirks
\end_layout

\begin_layout Standard
Vivaldi and PoPCorn describe the basic idea of how the network topology
 should look like and how it evolutes.
 However not all details are explained in the papers.
 In this subsection we would like to tell about our additions to the network
 topology.
\end_layout

\begin_layout Standard
Vivaldi performs weak if a node has only one connection to its parent.
 A stable foundation is needed to find a place in the space.
 That's why every node has connection to at least three supernodes.
 Not only for position purposes but also for backup when a parent leaves.
 The first three nodes which join the network automatically become a supernode.
 New nodes joining the network receive a list of existing supernodes from
 the server and choose a random supernode as parent.
 When a node has settled it gets a recommendation from its parent with the
 closest supernode.
 If it is worth it, the node switches from parent.
 After switching, we check if a node has children then it can lose its supernode
 status.
 So is the amount of supernodes dynamically adjusts to the size of the network.
\end_layout

\begin_layout Standard
An interesting detail is how the nodes are getting a parent node.
 Due to continuously changing network where the nodes are changing of the
 supernode status, asynchronous errors are very easy to get.
 That is why we use a query functionality to request adoption of a supernode.
 A supernode can always reject new requests if the situation has changed.
\end_layout

\begin_layout Standard
As just said, asynchronous requests make the network vulnerable for errors.
 We implemented some functionality that can automatically detect and fix
 errors.
 Checking for inconsistencies is an important part of the network to ensure
 the network keeps running.
 Also before a node leaves the network it informs all connected nodes with
 its departure.
\end_layout

\begin_layout Subsubsection
Illustration
\end_layout

\begin_layout Standard
We would like to illustrate our technology with an example shown in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Node-Inspector"

\end_inset

.
 Legenda is as follows:
\end_layout

\begin_layout Itemize
Red bullets illustrate supernodes.
\end_layout

\begin_layout Itemize
Green bullets illustrate normal nodes.
\end_layout

\begin_layout Itemize
Yellow bullets illustrate normal nodes with a token.
\end_layout

\begin_layout Itemize
Violet edges illustrate a parent-child or sibling connection.
 Random connections to other nodes are not shown.
\end_layout

\begin_layout Itemize
Yellow edges illustrate a token force.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/inspector.PNG
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Network topology
\begin_inset CommandInset label
LatexCommand label
name "fig:Node-Inspector"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Game
\end_layout

\begin_layout Standard
Our game 
\noun on
Orbit Impossible
\noun default
 is a HTML5 3D dogfighting game.
 All players start in a small aerial vehicle on the surface of a planet.
 From here they can fly around the planet and shoot down other players with
 little bullets.
 Because we wanted the game to be easily playable for short amount of time
 without a steep learning curve, we picked the immutable world variant.
 An immutable world is easy to understand and does not require much explanation
 to the user.
 The only interaction a player can have with the world is landing on it,
 and when approaching with a too large velocity, crashing into it.
 The other possible interaction is shooting down other players.
\end_layout

\begin_layout Standard
To play the game, the user visits a website.
 While the game is loading in the background and a connection to the network
 is established, the user gets some basic information about the game.
 After clicking this screen away an option to pick the controller is presented.
 Currently two different options are available: Controlling by mouse and
 keyboard or controlling via an Google Android smartphone (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Controller-selection-in"

\end_inset

).
 In the case of mouse and keyboard, the control mapping is shown (figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Mouse/Keyboard-control-mapping"

\end_inset

).
 When the mobile phone is selected, the user is asked to scan a QR code
 to connect his or her phone to the game (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:QR-code-to"

\end_inset

).
 After this is done, a similar control mapping is shown.
\end_layout

\begin_layout Standard
After pressing the boost button, which is used to ascend from the planet,
 the player spawns in the world and starts to fly upwards (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-newly-spawned"

\end_inset

).
 The goal of the game is to kill as many opponents as possible while trying
 not to die yourself.
 Killing other players is possible by shooting tiny projectiles from a cannon
 attached to the bottom of the spacecraft (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-player-firing"

\end_inset

).
 When a player dies, scores for the victim and the killer are updated in
 the scoreboard and the deceased player can respawn by pressing the boost
 button again (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-leaderboard"

\end_inset

; the death in that screenshot resulted from a suicide, so no killer is
 visible).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/controller-selection.png
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Controller selection in Orbit Impossible
\begin_inset CommandInset label
LatexCommand label
name "fig:Controller-selection-in"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/mouse-keyboard-controls.png
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Mouse/Keyboard control mapping in Orbit Impossible
\begin_inset CommandInset label
LatexCommand label
name "fig:Mouse/Keyboard-control-mapping"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/qr-code-controller.png
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
QR code to connect a mobile phone to Orbit Impossible
\begin_inset CommandInset label
LatexCommand label
name "fig:QR-code-to"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/player-spawn.png
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
A newly spawned player
\begin_inset CommandInset label
LatexCommand label
name "fig:A-newly-spawned"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/player-fire.png
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
A player firing projectiles
\begin_inset CommandInset label
LatexCommand label
name "fig:A-player-firing"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/leaderboard.png
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The leaderboard
\begin_inset CommandInset label
LatexCommand label
name "fig:The-leaderboard"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
