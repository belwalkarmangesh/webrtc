#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
Network topology
\end_layout

\begin_layout Standard
At this moment we have implemented an advanced network topology and we are
 still improving it.
 In this section, we would like to discuss a couple of possible improvements
\end_layout

\begin_layout Subsubsection
Supernode overlay network
\end_layout

\begin_layout Standard
The supernodes have a important role to provide for communication between
 all nodes.
 At this moment if a child node wants to send a message to a random node,
 it sends it to it's parent.
 If the receiver does not have the same parent, the parent sends a package
 to all siblings and one of them will hopefully deliver the message to it's
 children.
 All supernodes are connected with each other what makes the network less
 scalable.
 A lot of research is done in field of managing supernode connections.
 Adaptive algorithms discussed in
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Supernode-topologies-and"

\end_inset

 offer a solution to connect the supernodes if the latency is smaller than
 a threshold.
 More research is needed to determine if the network stays reliable after
 this change
\end_layout

\begin_layout Subsubsection
Routing tables
\begin_inset CommandInset label
LatexCommand label
name "sub:Routing-tables"

\end_inset


\end_layout

\begin_layout Standard
At this moment all supernodes receive a message when a message has to be
 delivered.
 It should be a good idea to remember the route after the first time the
 message is delivered.
 This is one of the examples of the optimizations we can implement for routing
 of messages.
\end_layout

\begin_layout Subsection
Network security
\end_layout

\begin_layout Standard
During this project the main goal was to create a scalable distributed network
 using WebRTC.
 As requirement we posed that we would be in a secured research environment
 without unknown threats from the outside and therefore securing the network
 against malicious users was not required.
\end_layout

\begin_layout Standard
To use the developed network in a production environment, security is an
 issue though.
\end_layout

\begin_layout Standard
In this chapter we will go into possibilities to make the entire system
 more secure.
 We begin with preventing the network to collapse after being flooded.
 Then we continue with the game's state integrity after malformed packets
 arrive or get lost.
 Last we will discuss problems with security of the game with the current
 network implementation.
\end_layout

\begin_layout Subsubsection
Overloading the network or server
\end_layout

\begin_layout Standard
Currently all nodes in the network connect to a central server.
 This is done to track all nodes so new nodes can easily find an entrypoint
 to the network.
 The WebRTC connection initialization is also sent via this central server.
 Once the first WebRTC connection is established, this connection will get
 used to establish further connections with nodes in the network.
\end_layout

\begin_layout Standard
Currently the central server, nor nodes in the network are prepared for
 a user requesting uncountable connections and the server and all nodes
 will happily reply to all requests.
 In a final product this should be prevented.
\end_layout

\begin_layout Standard
One option would be to limit the amount of connections a single user can
 open to the central server.
 When the central server detects many incoming connections from the same
 computer, it can just block this user for a certain time.
 This will reduce the serverload significantly.
\end_layout

\begin_layout Standard
When a computer is already connected to the network it could decide to flood
 the network.
 This can be countered by letting every node check if a user did not send
 too many messages in the recent time.
 If the amount of messages reaches a certain threshold, the node could decide
 to not relay a single packet from the spammer and disconnect the connection.
 Eventually all sane nodes will block the spamming node because they all
 use the same rules.
 This results in the malfunctioning or malicious spamming node to be split
 from the network.
\end_layout

\begin_layout Subsubsection
Game integrity
\end_layout

\begin_layout Standard
Another problem is the integrity of the games state.
 In the current implementation the game will broadcast the information about
 its own player (location and speed) five times a second to all other players.
 This information is picked up and treated as if it must be the truth.
\end_layout

\begin_layout Standard
We cannot expect this package to be correct though, because WebRTC has two
 different options to create a data channel: a reliable variant and an unreliabl
e variant.
 Unfortunately Google Chrome currently only supports the unreliable variant.
 A way to do this better is to only send updates when it is absolutely mandatory.
 Combined with only sending state changes instead of full updates, transmitting
 these new packets via a reliable data channel, should reduce the bandwidth
 substantially and reduces the risk of out-of-sync players.
\end_layout

\begin_layout Subsubsection
Game security
\end_layout

\begin_layout Standard
Apart from the ability to easily overload the network there are more issues
 regarding the security of the network and the game.
 The biggest problem we are facing is the total lack of sanity checks on
 received packets.
 First of all we expect all packets to be in a specific format and if a
 packet arrives that does not fit in this format, the resulting behaviour
 will be unpredictable.
 Depending on where the packet contains malformed information, the entire
 game might stop working, the connection to the network drops or nothing
 bad happens at all.
\end_layout

\begin_layout Standard
Another flaw arising from the lack of sanity checks is the ability to inject
 arbitrary packets about other players into the network, allowing a user
 to teleport himself, but if done right also others to a desired place.
 Since the most difficult task in the game is actually hitting other players,
 the ability to do harm is limited with teleporting.
 A bigger problem is the ability to create an uncountable amount of projectiles
 flying in all directions and automatically remove all projectiles by other
 players.
 Doing so is easier than teleporting another player and renders the game
 unplayable for everyone.
\end_layout

\begin_layout Standard
To counter these issues, the networking library has to first check if a
 packet fits the defined format.
 It also has to include a reliable way of finding out who really sent a
 specific packet.
 If it turns out that the claimed sender and actual sender don't match up,
 it should just get ignored.
\end_layout

\begin_layout Standard
The game then does not receive corrupt or wrong data but the problem of
 projectile manipulation still exists.
 To counter this, the game has to tie each packet that modifies an entity
 to the owner of said entity.
 If someone else tries to modify an entity that he or she does not own,
 it should just get ignored.
 To prevent players from creating more bullets than allowed or teleporting
 themselves, all players should check if all other players obey the game
 rules.
 If this is not the case (this could also happen if two users play on two
 different versions) the game should drop the connection to the malfunctioning
 node because otherwise these two clients would just ignore each others
 packets which makes the connection between them useless.
\end_layout

\begin_layout Subsection
Cross Platform
\end_layout

\begin_layout Standard
Currently our library only works with Google Chrome 28 and above.
 This limitation has to do with the lack of implementations of WebRTC in
 most other browsers.
 The only other browser with WebRTC support that is commonly used is Mozilla
 Firefox.
 Unfortunately this browser does not implement all callbacks as the W3C
 defined them in the API.
 Luckily it is only a matter of time until more browsers start implementing
 WebRTC and Mozilla Firefox switching to the official API definition and
 this problem should fix itself.
\end_layout

\begin_layout Standard
In our research we neglected Opera because of its tiny amount of the marketshare
 (1.15% worldwide and even less in the Netherlands; see fig 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Marketshare-of-browsers"

\end_inset

 for reference).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/browser-stats-21082013.jpg
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Marketshare of browsers on August 21, 2013; http://gs.statcounter.com/#browser-ww-
daily-20130821-20130821-bar
\begin_inset CommandInset label
LatexCommand label
name "fig:Marketshare-of-browsers"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Peer discovery
\end_layout

\end_body
\end_document
