#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language dutch
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
Network security
\end_layout

\begin_layout Standard
During this project the main goal was to create a scalable distributed network
 using WebRTC.
 As requirement we posed that we would be in a secured research environment
 without unknown threats from the outside and therefore securing the network
 against malicious users was not required.
\end_layout

\begin_layout Standard
To use the developed network in a production environment, security is an
 issue though.
\end_layout

\begin_layout Standard
In this chapter we will go into possibilities to make the entire system
 more secure.
 We begin with preventing the network to collapse after being flooded.
 Then we continue with the game's state integrity after malformed packets
 arrive or get lost.
 Last we will discuss problems with security of the game with the current
 network implementation.
\end_layout

\begin_layout Subsubsection
Overloading the network or server
\end_layout

\begin_layout Standard
Currently all nodes in the network connect to a central server.
 This is done to track all nodes so new nodes can easily find an entrypoint
 to the network.
 The WebRTC connection initialization is also sent via this central server.
 Once the first WebRTC connection is established, this connection will get
 used to establish further connections with nodes in the network.
\end_layout

\begin_layout Standard
Currently the central server, nor nodes in the network are prepared for
 a user requesting uncountable connections and the server and all nodes
 will happily reply to all requests.
 In a final product this should be prevented.
\end_layout

\begin_layout Standard
One option would be to limit the amount of connections a single user can
 open to the central server.
 When the central server detects many incoming connections from the same
 computer, it can just block this user for a certain time.
 This will reduce the serverload significantly.
\end_layout

\begin_layout Standard
When a computer is already connected to the network it could decided to
 flood the network.
 This can be countered by letting every node check if a user did not send
 too many messages in the recent time.
 If the amount of messages reaches a certain threshold, the node could decide
 to not relay a single packet from the spammer and disconnect the connection.
 Eventually all sane nodes will block the spamming node because they all
 use the same rules.
 This results in the malfunctioning or malicious spamming node to be split
 from the network.
\end_layout

\begin_layout Subsubsection
Game integrity
\end_layout

\begin_layout Subsubsection
Game security
\end_layout

\end_body
\end_document
