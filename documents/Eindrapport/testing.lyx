#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language dutch
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
During the development of our library and demonstrational game we used several
 frameworks and tools to assure the quality of the written code and to test
 it properly.
 We also had access to the expertise of the Software Improvement Group (SIG)
 to review our code.
\end_layout

\begin_layout Subsection
Frameworks
\end_layout

\begin_layout Standard
The used frameworks for testing are essentially Jasmine for Behaviour-Driven
 Development and CoDo for automated code documentation generation.
\end_layout

\begin_layout Subsubsection
Jasmine
\end_layout

\begin_layout Standard
Jasmine is a Behaviour-Driven Development (BDD) testing framework for JavaScript.
 It allows the developer to easily convert user-stories to proper BDD test-cases.
 These test cases can then be run from a command-line interface to create
 an easy to read overview of failing and passing tests.
\end_layout

\begin_layout Standard
This helped us a lot in debugging functionality that broke older functionality.
\end_layout

\begin_layout Subsubsection
CoDo
\end_layout

\begin_layout Standard
Good code needs to be documented well.
 CoDo specifies a way to write comments in CoffeeScript code that allows
 CoDo to easily extract this metainformation about the code and automatically
 create documentation.
\end_layout

\begin_layout Subsection
Tools
\end_layout

\begin_layout Subsubsection
JS Coverage
\end_layout

\begin_layout Standard
JS Coverage is a framework that 
\begin_inset Quotes eld
\end_inset

instruments
\begin_inset Quotes erd
\end_inset

 JavaScript code to include counting executions of lines of code before
 Jasmine runs the test.
 After running the test, JS Coverage will then read out how often a specific
 line of code was executed and creates easy to read reports about this.
\end_layout

\begin_layout Standard
Unfortunately JS Coverage only reports line coverage, which of course does
 not say a lot about code.
 A better framework would've been Istanbul which features a lot more (for
 example branch coverage).
 Unfortunately it turned out to be a lot of work to get Istanbul to work
 with our CoffeeScript code.
 Therefore work on this was abandoned to not spend more work on getting
 the testing framework to work than to actually develop the library and
 game.
\end_layout

\begin_layout Subsubsection
cake
\end_layout

\begin_layout Standard
With cake it is possible to create buildscripts that run on every computer
 independant from settings and operating system.
 This helped us a lot in building the project on regular basis and automatically
 run all tests to ensure the codes quality.
\end_layout

\begin_layout Subsubsection
CoffeeLint
\end_layout

\begin_layout Standard
CoffeeLint checks the code to ensure a coherent style of coding.
 This helps reading the code because it is ensured that code-aspects like
 whitespacing are the same in every file.
\end_layout

\begin_layout Subsubsection
Sublime
\end_layout

\begin_layout Standard
The text-editor sublime helped us slightly in keeping the code clean by
 automatically removing unnecessary whitespace at line endings.
\end_layout

\begin_layout Subsection
SIG
\end_layout

\begin_layout Standard
The Software Improvement Group try to evaluate the quality of code by automatic
 and manual analysis.
 For the this project we are required to send our code to SIG twice.
 Once halfway of the project and the second time at the end of the project.
 After sending it in the first time we are expected to read the comments
 carefully and adjust the code accordingly so the second feedback points
 out less issues.
 Our first review van be found in Appendix ....
\end_layout

\end_body
\end_document
