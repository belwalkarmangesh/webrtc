#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
Technical challenges
\end_layout

\begin_layout Subsubsection
Testing
\end_layout

\begin_layout Standard
After setting up our development environment we noticed that testing in
 this environment wasn't as easy as expected.
 Our combination of having shared code between the server and the clients,
 that code being written in CoffeeScript and included via Require.js turned
 out to be something most standard testing frameworks for JavaScript were
 not able to accomplish.
\end_layout

\begin_layout Standard
We solved this by daisychaining several processes.
 First we found a modified CoffeeScript to JavaScript compiler that also
 adds code-coverage information to the code as explained in
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:JS-Coverage"

\end_inset

.
 After this we would tell Jasmine to execute the tests as JavaScript and
 use Require.js and at the same time keep track of the global code-coverage
 array JSCoverage created.
 After this was done, JSCoverage would generate the report about the code-covera
ge and Jasmine would create the report about failing and succeeding tests.
\end_layout

\begin_layout Standard
As pointed out in
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:JS-Coverage"

\end_inset

 as well, we wanted more than just code-coverage.
 We found a tool called Istanbul that could also generate statement, branch
 and function coverage but it turned out to be a lot of work to get this
 working with CoffeeScript because in order to instrument the code it used
 a JavaScript parser which we had to replace with a CoffeeScript parser
 with the same functionality.
 Technically this is possible but would require too much time to do during
 our project.
\end_layout

\begin_layout Subsection
Process challenges
\end_layout

\end_body
\end_document
