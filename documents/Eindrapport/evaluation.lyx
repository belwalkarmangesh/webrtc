#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
During our bachelor project we have been involved in a software development
 project completely from the beginning.
 In this chapter we would like to reflect on our experiences during this
 project.
\end_layout

\begin_layout Subsection
Technical challenges
\end_layout

\begin_layout Subsubsection
webrtc
\end_layout

\begin_layout Standard
is wel handig denk ik
\end_layout

\begin_layout Subsubsection
Unit Testing
\end_layout

\begin_layout Standard
After setting up our development environment we noticed that testing in
 this environment wasn't as easy as expected.
 Our combination of having shared code between the server and the clients,
 that code being written in CoffeeScript and included via Require.js turned
 out to be something most standard testing frameworks for JavaScript were
 not able to accomplish.
\end_layout

\begin_layout Standard
We solved this by daisychaining several processes.
 First we found a modified CoffeeScript to JavaScript compiler that also
 adds code-coverage information to the code as explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:JS-Coverage"

\end_inset

.
 After this we would tell Jasmine to execute the tests as JavaScript and
 use Require.js and at the same time keep track of the global code-coverage
 array JSCoverage created.
 After this was done, JSCoverage would generate the report about the code-covera
ge and Jasmine would create the report about failing and succeeding tests.
\end_layout

\begin_layout Standard
As pointed out in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:JS-Coverage"

\end_inset

 as well, we wanted more than just code-coverage.
 We found a tool called Istanbul that could also generate statement, branch
 and function coverage but it turned out to be a lot of work to get this
 working with CoffeeScript because in order to instrument the code it used
 a JavaScript parser which we had to replace with a CoffeeScript parser
 with the same functionality.
 Technically this is possible but would require too much time to do during
 our project.
\end_layout

\begin_layout Subsubsection
Game Testing
\end_layout

\begin_layout Standard
Testing the game was a challenge as well.
 We did make this easier for ourselves by creating bots that join the game
 and randomly fly around and fire projectiles.
 These bots help a lot for looking network errors and performance problems
 but running multiple bots (10+) on the same computer is hardly doable because
 of the high amount of calculations that need to be done.
 This can be solved by sharing parts of the bots memory with other bots
 so calculations for collision detections is only done once per frame instead
 of once per frame per bot.
 To overcome this problem we added more computers to simulate bots because
 adding the shared state would cost too much time to be useful.
\end_layout

\begin_layout Subsection
Process challenges
\end_layout

\begin_layout Subsubsection
Scrum
\end_layout

\begin_layout Standard
The most of us haven't experienced scrum in business environment.
 After some reading in and assigning roles to ourselves, we were ready to
 go.
 What we did not expect in the first couple of weeks is that gaining more
 insight in WebRTC technology or gaining more insight in node topology does
 not fit well in scrum philosophy because the amount of time the task is
 going to last is hard to predict.
 That is why we started with scrum in week 3 when we fully specified what
 we are really going to build and deliver.
\end_layout

\begin_layout Standard
An interesting detail is also that because of the vacation period, we have
 had a second scrum product owner who first had to get in to the project.
 It succeeded very well and he brought new insights with him.
 It was good experience because falling out of the scrum team also happens
 in real work environment.
\end_layout

\begin_layout Subsubsection
Behaviour driven development
\end_layout

\begin_layout Standard
In our plan of action we described that we will maintain the behaviour driven
 development discussed earlier in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Behaviour-Driven-Development"

\end_inset

.
 In hindsight it turned out to be a bad decision.
 BDD can only work if a clear product requirements are defined in the beginning.
 We built a prototype which later became an end product.
 After the prototype was ready and the end goal was clear, we decided to
 test the whole existing application and try to continuously achieve the
 100% code coverage.
\end_layout

\end_body
\end_document
