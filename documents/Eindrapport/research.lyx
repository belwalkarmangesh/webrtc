#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
WebRTC
\begin_inset CommandInset label
LatexCommand label
name "sub:WebRTC"

\end_inset


\end_layout

\begin_layout Standard
As WebRTC is an integral part of the project, a lot of time has gone into
 reading the official W3C WebRTC specifications and producing prototypes
 that demonstrate the uses of the technology.
 In this research phase of the project we've experimented with different
 techniques for establishing connections, methods of sending and receiving
 data and developing a useful application structure.
\end_layout

\begin_layout Subsubsection
API differences
\end_layout

\begin_layout Standard
We discovered early on that even though the Firefox and Chrome web browsers
 are able to communicate to each other through WebRTC media streams, their
 ways of handling events and setting up connections are incompatible, and
 their data channels are not able to communicate with one another as well,
 regardless of the use of the adapter.js library mentioned before.
 Comparing their respective APIs with the official WebRTC specifications
 we found that Chrome's implementation came closest, and keeping in mind
 that we were merely conducting research on WebRTC and not building an end-user
 product, we decided to drop support for Firefox.
 We had our hopes that Firefox would fix their implementation but as of
 this writing that has yet to happen.
 We do expect that Mozilla, Firefox's producer, will eventually bow to the
 official specifications and that our library will work on Firefox as well.
\end_layout

\begin_layout Subsubsection
Bootstrapping
\begin_inset CommandInset label
LatexCommand label
name "sub:Establishing-a-peer"

\end_inset


\end_layout

\begin_layout Standard
Peer discovery and bootstrapping is an important aspect of any peer-to-peer
 network and is not a trivial matter.
 It's not normally known among peers attempting to enter the network which
 peers are present and are able to provide an entry point into the network.
 Even if it is known to a peer whom to connect to, actually establishing
 a connection to that peer using WebRTC requires some external mechanism
 (the signalling channel) to coordinate the initial set up.
 We identify several different manners of going about this bootstrapping
 process.
\end_layout

\begin_layout Itemize
Using a web server, one can use AJAX requests to a web server which in turn
 routes information from one peer to the other, but this has the disadvantage
 that any peer has to be aware that the other peer is requesting a connection,
 or that the use of continuous AJAX polling, continuously requesting the
 server for an update, is required.
 The web server can maintain a list of nodes that can be used as entry point
 and pass this information on to new peers.
\end_layout

\begin_layout Itemize
Another way to establish the connection is to have all peers connected to
 a web server using WebSockets, a technology which provides full continuous
 communication between the browser and a web server, and is always available
 and open for sending and receiving data.
 Session descriptions can then be easily routed through this web server.
 This manner would require server technology that can handle persistent
 WebSocket connections, such as Node.js.
\end_layout

\begin_layout Itemize
Apart from that, it would in theory be possible to use a DNS discovery technique
s such as Apple's Bonjour to detect WebRTC nodes on the local network, but
 this isn't (yet) possible without the use third party plugins.
\end_layout

\begin_layout Itemize
Aside from using a web server or non-existent technology, it would also
 be possible, although cumbersome, to exchange the information in manually,
 like copying and pasting the session description or using QR-encoding to
 encode the session description into an image which can be scanned by another
 machine.
\end_layout

\begin_layout Subsubsection
Data channels
\end_layout

\begin_layout Standard
In our prototypes, we found that data channels are by default rate limited
 to 30 kilobits per second, and if one attempted to send data faster, WebRTC
 would throw mysterious and indescriptive error messages.
 After some research we discovered that the session description generated
 at initialization can be simply altered to increase the data rate by doing
 a regular expression replacement of the string flag that indicates the
 bandwidth, although this method is very unintuitive and feels a bit awkward.
 For now, however, this seems to be the only way to achieve a useful rate
 of data flow for the channel.
\end_layout

\begin_layout Standard
Another peculiar detail of the data channel implementation in Chrome, and
 one that makes it appear that data channels are treated as a second-class
 citizen by WebRTC developers, is that the session description packet to
 instantiate the WebRTC connection is too large to send through a WebRTC
 data channel.
 This has the implication that, without intervening, peers cannot renegotiate
 their own connections.
 This we found of course to be unacceptable and led to devising a way to
 split up packets before transmitting them, and reassembling them on the
 other side.
 In hindsight this is a must-have feature regardless of the size of the
 session description packet, as this means that we can make any packet arbitrari
ly (though realistically) large without encountering any problems.
\end_layout

\begin_layout Subsection
Peer-to-Peer
\begin_inset CommandInset label
LatexCommand label
name "sub:Peer-to-Peer"

\end_inset


\end_layout

\begin_layout Standard
This chapter describes the first choices we made in our research track and
 explains the road to the desired algorithm.
\end_layout

\begin_layout Subsubsection
Structuring the network
\end_layout

\begin_layout Standard
WebRTC is a new technology and first we decided to run some tests of how
 the WebRTC unstructured overlay network will perform, so if all nodes will
 be connected to all other nodes and send a significant amount data through.
 Already after 15 nodes the network started to display connection errors
 and sometimes failed to successfully send a message.
 Of course, we can quickly see that unstructured networks will perform weakly,
 so we should structure the network.
\end_layout

\begin_layout Standard
In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Supernode-topologies-and"

\end_inset

 we discussed different supernode election approaches, at this moment we
 choose one of the approaches to start our research on the best fittable
 topology.
 We choose the group based algorithms as the most suitable for our purposes
 because of the decentralized approach of supernode selection.
 However the rule sets of the adaptive algorithms can also be very valuable
 during the implementation of the group base algorithm.
\end_layout

\begin_layout Subsubsection
Group based network systems
\end_layout

\begin_layout Standard
We would like to compare a couple of group based systems below.
 They are divided into three classes by how nodes are organized 
\begin_inset CommandInset citation
LatexCommand cite
key "sacha2009exploiting"

\end_inset

.
\end_layout

\begin_layout Enumerate
Location-based systems are organized by their physical location, defined
 for example by communication latency between two nodes.
\end_layout

\begin_layout Enumerate
Semantic based systems are organized by their semantics.
 For example it could be a node position in the game world.
\end_layout

\begin_layout Enumerate
Grid based systems are organized by an administrative domain.
 The large-scale grid consists of small-scale grids what are actually a
 network themselves.
\end_layout

\begin_layout Standard
The choice of structuring the nodes is a tough one.
 Location based systems are better for optimal communication for all purposes,
 while semantic based systems can implement the structure for specific purposes.
 For example in our game, you would not send any data to a player who can
 not interact with you.
 We choose to implement a location-based structure to keep our library useful
 for the different purposes.
 However during the implementation we should make it easy to switch to different
 organizations.
\end_layout

\begin_layout Subsubsection
Location based systems
\end_layout

\begin_layout Standard
Now we made a choice which type of algorithm we are going to use, we started
 to discover the available systems.
 Below four proposed systems are described.
\end_layout

\begin_layout Enumerate

\series bold
Crown
\series default
 organises the network by the prefix of the IP of the user.
 The users with the same prefix are likely to have low latency and high
 bandwidth.
 Nodes in the same group elect a supernode with criteria of high bandwidth,
 high availability, large computational power and a low load 
\begin_inset CommandInset citation
LatexCommand cite
key "conf/euc/WangTL04"

\end_inset

.
 This approach looks very simple and sorting the nodes by IP can be very
 unreliable.
 Also no situation is described when there are too much nodes in the same
 group.
\end_layout

\begin_layout Enumerate

\series bold
Peer-to-peer Asymmetric file Sharing System (PASS)
\series default
, like the name says is designed for sharing files.
 The approach is similar to crown by grouping the nodes by latency.
 An interesting idea here is that PASS introduces a strong single node that
 handles all communication between separate groups.
 Also in PASS a supernode keeps track a backup supernode for case it leaves
 
\begin_inset CommandInset citation
LatexCommand cite
key "conf/saint/KwonR03"

\end_inset

.
\end_layout

\begin_layout Enumerate

\series bold
PoPCorn
\series default
 relies upon an external algorithm like Vivaldi to structure the network
 in n-dimensional space.
 First, the network distributes a token to a random node, after which this
 node negotiates with other token holders in the network.
 He advertises his token and calculates the combined repulsion force of
 all other tokens in the network.
 If the force is lower than a certain threshold for a certain number of
 time steps, a node may keep it and becomes a supernode.
 This approach does not describe how a token generation works in a real
 time scenario 
\begin_inset CommandInset citation
LatexCommand cite
key "PoPCorn"

\end_inset

.
\end_layout

\begin_layout Enumerate

\series bold
Wolf and Merz
\series default
 heuristic evolutionary algorithm tries to minimise the distance between
 the supernodes and their clients and the distance between the supernodes.
 This algorithm uses the local search principle to hopefully find a suitable
 solution 
\begin_inset CommandInset citation
LatexCommand cite
key "wolf"

\end_inset

.
 An interesting fact is that 
\begin_inset CommandInset citation
LatexCommand cite
key "wolf"

\end_inset

 illustrates that location based supernode selection is a NP-hard problem.
\end_layout

\begin_layout Standard
We choose for the PoPCorn algorithm because the organization of nodes based
 on latency aims to reach the fastest communication in the network.
 The token distribution principle seems reliable to dynamically elect the
 supernodes dependent of the real time coordinates.
 However a lot of implementation details are missing which offers an opportunity
 to edit PoPCorn to our own needs.
 For example 
\begin_inset CommandInset citation
LatexCommand cite
key "PoPCorn"

\end_inset

 only describes how the supernode selection works if all nodes are already
 in the network connected.
 In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Network-Topology"

\end_inset

 we will describe how we implemented PoPCorn in a continuously changing
 system.
\end_layout

\begin_layout Subsection
MMOG
\end_layout

\begin_layout Standard
The game is our second deliverable and has the main purpose to demonstrate
 the functionality of our networking library in a fun way.
 To demonstrate the library in the best way, the goal is to have the game
 push the library to its limits, either bandwidth limits, latency limits
 or scalability limits.
\end_layout

\begin_layout Standard
As high raw data throughput usually isn't an essential element for games,
 we have two options left: we can try to connect relatively few peers with
 a very low latency, which is great for a fast-paced action game, or a larger
 number of peers with a higher latency, which is great for role-playing-games
 where the action isn't as quick and a high number of players is essential
 to the game play.
\end_layout

\begin_layout Standard
As testing with a very large number of players can be hard to arrange, and
 because WebRTC offers low-latency data channels we picked the first option.
 
\end_layout

\begin_layout Standard
The game we decided to create is a 3D dog fighting game around a planet
 with little alien spaceships.
 Every player controls a single spaceship in 3rd person view.
 Players can fire small projectiles at other players to damage their spaceship.
 When the player descends to quickly she will crash into the planet and
 die.
 To further demonstrate synchronisation in the network, the game contains
 a leader board showing all accumulated kills and deaths of active players.
\end_layout

\begin_layout Standard
Another reason we went for this concept is because initially we wanted to
 create an application or game that would make extensive use of orientation
 sensors in the user's smartphone.
 This quickly changed to be a fully networked desktop game but we still
 liked the idea of being able to control the game with a smartphone.
 Therefore the ability to fly the spaceship by tilting the phone is included
 in this game.
\end_layout

\begin_layout Subsubsection
Network utilisation
\end_layout

\begin_layout Standard
In order to keep the game playable with a decent amount of players (around
 50) we need to make sure the game does not use too much bandwidth.
 Currently the game sends five packets per second about the players location
 and velocity.
 Every projectile results in one more packet.
 Bandwidth monitoring showed us that for every additional player in the
 game the total bandwidth usage increased with an average of 5 kilobyte/second
 (up- and download together).
 50 people playing together therefore results in an average bandwidth usage
 of 250 kilobyte/second, which is by any terms acceptable.
\end_layout

\begin_layout Subsubsection
Graphics Engine
\end_layout

\begin_layout Standard
For the graphics of the game we have various options, amongst which HTML5
 Canvas, inline SVG and WebGL, although only WegGL offers the raw graphics
 power we require for a 3D game.
 As WebGL itself is rather complex, there are various abstraction libraries
 for WebGL that wrap its functionality into a nice API, but none offer the
 level of sophistication that Three.js offers.
 Three.js is a fully-fledged 3D graphics engine that also includes functionality
 for - amongst others - importing textured models and shaders.
 
\end_layout

\end_body
\end_document
