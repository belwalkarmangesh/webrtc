#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
Methodology
\end_layout

\begin_layout Standard
In this chapter we will explain how we decided to execute this project.
 First we will tell about our software development methodology and after
 that we will continue with software development technique.
\end_layout

\begin_layout Subsubsection
Scrum
\end_layout

\begin_layout Standard
During the study Computer Science, we encountered several software development
 methodologies.
 From this we know that agile methodologies like Scrum fit very well in
 relatively short and small projects with a small team.
 Scrum uses small development cycles called sprints to stimulate a fast
 completion of the project.
 At the beginning of each sprint the team decides which features shall be
 implemented and at the end of the sprint there has to be a working product.
 Unimplemented features will remain in the 
\begin_inset Quotes eld
\end_inset

Product Backlog
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
In our team 
\noun on
Karens
\noun default
 is the Scrum Master.
 The task of the Scrum Master is to remove all distracting influences for
 the development team.
 Our Product Owner is 
\noun on
Victor Klos
\noun default
 from TNO.
 He prioritizes our Product Backlog and will ensure our product meets the
 requirements for TNO.
 
\noun on
Eelco Cramer
\noun default
 from TNO will assist us with technical problems.
\end_layout

\begin_layout Standard
The runtime of our project is very limited.
 Therefore we will have sprints of one week, from Thursday to Wednesday.
 Everyday at 10 o'clock we will have a daily standup that takes up 15 minutes
 at most.
 In this time we will discuss what we did the previous day and we will do
 the next day.
 Every Thursday morning there will be a Sprint Planning Meeting to determine
 which Product Backlog items will get included in the upcoming sprint.
 The Product Owner will try to always attend at least this weekly meeting
 to properly prioritize the backlog items.
\end_layout

\begin_layout Subsubsection
Behaviour-Driven Development
\end_layout

\begin_layout Standard
To deliver a fully tested library we decided to use Behaviour-Driven Development
 (BDD).
 BDD can be seen as an extension to Test-Driven Development (TDD).
 The difference is that tests in BDD try to be as close to user-stories
 as possible.
 These stories can easily be deduced from the Product Backlog items we use
 in Scrum.
 Just like with TDD, tests in BDD are written before the actual unit is
 being implemented.
 After writing all (at that moment failing) tests, the developer will try
 to get test after test to pass by implementing the least amount of code
 possible for this.
\end_layout

\begin_layout Standard
The tests will not only be used to determine if the software acts as described.
 Another use is to make sure new code does not break older functionality.
 As testing framework we use Jasmine, a BDD-test-framework for JavaScript.
\end_layout

\begin_layout Subsection
Development tools
\end_layout

\begin_layout Subsubsection
GitHub
\begin_inset CommandInset label
LatexCommand label
name "sub:GitHub"

\end_inset


\end_layout

\begin_layout Subsubsection
npm
\end_layout

\begin_layout Subsubsection
cake
\end_layout

\begin_layout Subsection
Planning Tools
\end_layout

\begin_layout Standard
In this chapter we will explain which tools did we use to gain an overview
 of the amount of work to be done.
 These tools also helped our mentors to keep a track what we are doing.
\end_layout

\begin_layout Subsubsection
GitHub issues
\end_layout

\begin_layout Standard
Like in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:GitHub"

\end_inset

 explained, we used GitHub for version control.
 A very handy GitHub feature available is the Issues.
 A new issue created ends up in the backlog.
 When the issue is chosen for the sprint, it gets a tag of the sprint, or
 so called milestones.
 That way we could easily filter the sprintlog from all other issues.
 In 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Github-issues-image"

\end_inset

 a sprintlog is illustrated.
\end_layout

\begin_layout Standard
We also used labeling of the issues.
 Some issues clearly belong to each other.
 For example in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Github-issues-image"

\end_inset

, labels 
\begin_inset Quotes eld
\end_inset

login" and 
\begin_inset Quotes eld
\end_inset

controllers" are used to get overview of what kind of work has to be done.
 We also used some default semantic issues like: bug, enchacement, duplicate,
 invalid etc.
 when needed.
\end_layout

\begin_layout Standard
To prevent the same issue is been worked on by different persons, each issue
 has to be assigned to someone before someone starts working on it.
 It makes also easy to filter all issues assigned to you to keep your personal
 to do list.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/github issues.PNG
	width 100line%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Github issues
\begin_inset CommandInset label
LatexCommand label
name "fig:Github-issues-image"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
HUboard
\end_layout

\begin_layout Standard
HUboard is an instant project management tool for GitHub whick helped us
 with an overview of the sprintlog.
 HUboard makes also use of labels, in our case: To do, In progress, Testing
 and Done.
 When an issue changes of status, you can drag it to other column.
 We also benefit of the prioritization possibilities in the To do category
 to order the issues how the scrum product owner it wanted.
 See 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:HUboard"

\end_inset

 for an example of our sprintlog.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/huboard.PNG
	width 100line%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
HUboard
\begin_inset CommandInset label
LatexCommand label
name "fig:HUboard"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
